data "aws_iam_policy_document" "inline_policy" {
  statement {
    sid       = "VisualEditor0"
    effect    = "Allow"
    resources = ["*"]

    actions = [
      "s3:ListStorageLensConfigurations",
      "s3:ListAccessPointsForObjectLambda",
      "s3:ListBucketMultipartUploads",
      "s3:ListAllMyBuckets",
      "s3:ListAccessPoints",
      "s3:ListJobs",
      "s3:ListBucketVersions",
      "s3:ListBucket",
      "s3:ListMultiRegionAccessPoints",
      "s3:ListMultipartUploadParts"
    ]
  }
}

data "aws_iam_policy_document" "base" {
  statement {
    sid = "BaseAccess"

    actions = [
      "s3:ListBucket",
      "s3:ListBucketVersions"
    ]

    resources = ["arn:aws:s3:::bucketname"]
    effect    = "Allow"
  }
}

data "aws_iam_policy_document" "all-resources-dev-access" {
  statement {
    effect    = "Allow"
    resources = ["*"]

    actions   = [
        "cloudwatch:PutDashboard",
        "logs:DeleteSubscriptionFilter",
        "cloudwatch:PutMetricData",
        "cloudwatch:DeleteAlarms",
        "logs:Describe*",
        "logs:StartQuery",
        "cloudwatch:DeleteInsightRules",
        "logs:CreateLogStream",
        "cloudwatch:UntagResource",
        "cloudwatch:DescribeAlarmsForMetric",
        "logs:CancelExportTask",
        "cloudwatch:ListDashboards",
        "cloudwatch:ListTagsForResource",
        "logs:DeleteRetentionPolicy",
        "logs:FilterLogEvents",
        "cloudwatch:PutAnomalyDetector",
        "cloudwatch:PutManagedInsightRules",
        "cloudwatch:DescribeInsightRules",
        "cloudwatch:GetDashboard",
        "cloudwatch:GetInsightRuleReport",
        "logs:List*",
        "cloudwatch:DisableInsightRules",
        "logs:StopQuery",
        "logs:DeleteQueryDefinition",
        "logs:Get*",
        "cloudwatch:GetMetricStatistics",
        "logs:CreateLogGroup",
        "logs:PutMetricFilter",
        "logs:CreateLogDelivery",
        "logs:UpdateLogDelivery",
        "cloudwatch:DescribeAlarms",
        "cloudwatch:GetMetricStream",
        "logs:PutSubscriptionFilter",
        "cloudwatch:GetMetricData",
        "logs:DeleteLogStream",
        "cloudwatch:ListMetrics",
        "cloudwatch:DeleteAnomalyDetector",
        "cloudwatch:DescribeAnomalyDetectors",
        "logs:CreateExportTask",
        "logs:DeleteMetricFilter",
        "cloudwatch:DeleteDashboards",
        "cloudwatch:DescribeAlarmHistory",
        "cloudwatch:DisableAlarmActions",
        "logs:DeleteLogDelivery",
        "logs:AssociateKmsKey",
        "cloudwatch:SetAlarmState",
        "xray:*",
        "logs:PutDestination",
        "cloudwatch:GetMetricWidgetImage",
        "logs:DisassociateKmsKey",
        "logs:DeleteLogGroup",
        "logs:PutDestinationPolicy",
        "logs:TestMetricFilter",
        "cloudwatch:EnableInsightRules",
        "logs:PutQueryDefinition",
        "logs:DeleteDestination",
        "logs:PutLogEvents",
        "cloudwatch:PutCompositeAlarm",
        "cloudwatch:ListManagedInsightRules",
        "cloudwatch:PutInsightRule",
        "cloudwatch:TagResource",
        "cloudwatch:PutMetricAlarm",
        "applicationinsights:*",
        "cloudwatch:EnableAlarmActions",
        "cloudwatch:ListMetricStreams",
        "logs:PutRetentionPolicy",
        "cloudwatch:Get*",
        "cloudwatch:List*",
        "cloudwatch:Describe*",
        "synthetics:Get*",
        "synthetics:Describe*",
        "synthetics:List*",
        "codepipeline:GetPipeline",
        "codepipeline:GetPipelineState",
        "codepipeline:GetPipelineExecution",
        "codepipeline:ListPipelineExecutions",
        "codepipeline:ListActionExecutions",
        "codepipeline:ListActionTypes",
        "codepipeline:ListPipelines",
        "codepipeline:ListTagsForResource",
        "codepipeline:ListWebhooks",
        "codepipeline:PollForJobs",
        "codepipeline:RetryStageExecution",
        "codepipeline:StartPipelineExecution",
        "codepipeline:StopPipelineExecution",
        "codestar-connections:GetConnection",
        "codestar-connections:ListConnections",
        "iam:ListRoles",
        "s3:GetBucketPolicy",
        "s3:GetObject",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "codecommit:ListBranches",
        "codecommit:ListRepositories",
        "codedeploy:GetApplication",
        "codedeploy:GetDeploymentGroup",
        "codedeploy:ListApplications",
        "codedeploy:ListDeploymentGroups",
        "elasticbeanstalk:DescribeApplications",
        "elasticbeanstalk:DescribeEnvironments",
        "lambda:GetFunctionConfiguration",
        "lambda:ListFunctions",
        "opsworks:DescribeApps",
        "opsworks:DescribeLayers",
        "opsworks:DescribeStacks",
        "codestar-notifications:ListNotificationRules",
        "codestar-notifications:ListEventTypes",
        "codestar-notifications:ListTargets",
        "ecs:UpdateService",
        "ecs:RunTask",
        "ecs:Describe*",
        "ecs:ExecuteCommand",
        "ecs:StartTask",
        "iam:ListRoles",
        "ecs:StopTask",
        "ecs:List*",
        "s3:*Object",
        "s3:Get*",
        "s3:List*",
        "secretsmanager:GetResourcePolicy",
        "secretsmanager:GetSecretValue",
        "secretsmanager:DescribeSecret",
        "secretsmanager:PutSecretValue",
        "secretsmanager:ListSecretVersionIds",
        "secretsmanager:ListSecrets",
        "ssm:DescribeParameters",
        "ses:SendRawEmail",
        "glue:RegisterSchemaVersion",
        "glue:GetSchemaByDefinition",
        "apigateway:GET",
        "cloudformation:DescribeAccountLimits",
        "cloudformation:DescribeChangeSet",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStackResource",
        "cloudformation:DescribeStackResources",
        "cloudformation:DescribeStacks",
        "cloudformation:GetStackPolicy",
        "cloudformation:GetTemplate",
        "cloudformation:GetTemplateSummary",
        "cloudformation:ListChangeSets",
        "cloudformation:ListExports",
        "cloudformation:ListImports",
        "cloudformation:ListStackResources",
        "cloudformation:ListStacks",
        "cloudshell:*",
        "dynamodb:DescribeReservedCapacityOfferings",
        "dynamodb:ListGlobalTables",
        "dynamodb:ListTables",
        "dynamodb:DescribeReservedCapacity",
        "dynamodb:ListBackups",
        "dynamodb:ListTagsOfResource",
        "dynamodb:DescribeTimeToLive",
        "dynamodb:DescribeLimits",
        "dynamodb:ListStreams",
        "ec2:DescribeAddresses*",
        "ec2:DescribeImages*",
        "ec2:DescribeInstances",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeTags",
        "ec2:DescribeVolume*",
        "ec2:DescribeVpcs",
        "elasticmapreduce:Describe*",
        "elasticmapreduce:List*",
        "s3:GetObject",
        "s3:ListAllMyBuckets",
        "s3:ListBucket",
        "sdb:Select",
        "aoss:GetAccessPolicy",
        "aoss:CreateAccessPolicy",
        "aoss:UpdateSecurityConfig",
        "aoss:UpdateVpcEndpoint",
        "aoss:UpdateSecurityPolicy",
        "aoss:ListAccessPolicies",
        "aoss:ListSecurityPolicies",
        "aoss:UpdateAccessPolicy",
        "aoss:DeleteSecurityPolicy",
        "aoss:UntagResource",
        "aoss:GetSecurityPolicy",
        "aoss:ListTagsForResource",
        "aoss:BatchGetCollection",
        "aoss:ListSecurityConfigs",
        "aoss:CreateSecurityConfig",
        "aoss:CreateSecurityPolicy",
        "aoss:TagResource",
        "aoss:DeleteVpcEndpoint",
        "aoss:BatchGetVpcEndpoint",
        "aoss:GetPoliciesStats",
        "aoss:ListVpcEndpoints",
        "aoss:UpdateAccountSettings",
        "aoss:GetAccountSettings",
        "aoss:GetSecurityConfig",
        "aoss:CreateVpcEndpoint",
        "aoss:DeleteSecurityConfig",
        "aoss:ListCollections",
        "aoss:DeleteAccessPolicy",
        "aoss:CreateCollection",
        "iam:GetAccountSummary",
        "iam:GetGroup",
        "iam:GetGroupPolicy",
        "iam:GetRole",
        "iam:GetRolePolicy",
        "iam:GetRolePolicyVersion",
        "iam:ListAccountAliases",
        "iam:ListGroupPolicies",
        "iam:ListGroups",
        "iam:ListGroupsForUser",
        "iam:ListUsers",
        "iam:ListUserPolicies",
        "iam:ListAttachedRolePolicies",
        "iam:ListRoles",
        "iam:ListRolePolicies",
        "iam:GetAccountPasswordPolicy",
        "iam:ListAccessKeys",
        "iam:GetUser",
        "iam:GetPolicy",
        "iam:GetPolicyVersion",
        "iam:PassRole",
        "lambda:*",
        "rds:Describe*",
        "rds:Read*",
        "rds:List*",
        "redshift:Describe*",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ReceiveMessage",
        "sqs:ListQueues"         
    ]
  }
}
